#!/usr/bin/env python
# encoding: utf-8
"""
views.py - gaetk based views for AppEngine

Created by Maximillian Dornseif on 2009-11-15.
Copyright (c) 2009, 2012 Maximillian Dornseif. All rights reserved.
"""

import lib

import datetime
import logging
import re
import urllib

from google.appengine.api import images
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp import util
from google.appengine.ext import ndb  
from google.appengine.ext import blobstore
from google.appengine.ext.webapp import blobstore_handlers
import gaetk.handler

from taskmaster import models

class TasklistHandler(gaetk.handler.BasicHandler):
    @ndb.toplevel
    def get(self):
        user = users.get_current_user()
        ops = models.Op.query().fetch(100)

        # TODO: move parsing / peep creation somewhere else
        #for op in ops:
        #    parsed = parser.parse(op.task)
        #    if 'peep' in parsed:
        #        peep, created = request.account.peeps.get_or_create(name=parsed['peep'])
        #        if not op.peep:
        #            op.peep = peep
        #            op.save()
        self.render(dict(title=u"Tasks",
                         tasks=ops,
                         ), 'taskmaster/main.html')


#@account_login_required
#def opml_tasklist(request):
#    generated_on = str(datetime.datetime.now())
#    # Configure one attribute with set()
#    root = ET.Element('opml')
#    root.set('version', '1.0')
#    comment = ET.Comment('Generated by Sheila')
#    root.append(comment)
#    head = ET.SubElement(root, 'head')
#    ET.SubElement(head, 'title').text = u"%s's Ops @ asksheila.org" % account.public_name
#    ET.SubElement(head, 'dateCreated').text = generated_on
#    ET.SubElement(head, 'dateModified').text = generated_on
#    body = ET.SubElement(root, 'body')
#    ops = request.account.ops.exclude(state='deleted').exclude(state='finished')
#    for op in ops:
#        ET.SubElement(body, 'outline', {'text':op.task})
#    response_top = '<?xml version="1.0" encoding="utf-8"?>\n'
#    response = http.HttpResponse(response_top + ET.tostring(root, 'utf-8'),
#                             content_type='text/x-opml; charset=utf-8')
#    response['Content-Disposition'] = 'attachment; asksheila.opml'
#    return response


def op_detail(request, designator):
    op = request.account.ops.get(designator=designator)
    return shortcuts.render_to_response('taskmaster/op_detail.html', {'op': op})


def peep_list(request):
    peeps = request.account.peeps.all()
    return shortcuts.render_to_response('taskmaster/peep_list.html', {'peeps': peeps})


def peep_detail(request, designator):
    peep = request.account.peeps.get(designator=designator)
    return shortcuts.render_to_response('taskmaster/peep_detail.html', {'peep': peep})


def account_settings(request):
    try:
        instance = models.Account.objects.get(email=request.user.email)
    except models.Account.DoesNotExist:
        # create new account / empty form
        instance = None
        twitter_problem = False
    if request.method == 'POST':
        form = forms.AccountForm(request.POST, instance=instance)
        if form.is_valid():
            account = form.save()
            return http.HttpResponseRedirect('')
    else:
        if not instance:
            name = ' '.join([request.user.first_name, request.user.last_name]).strip()
            data = {'email': request.user.email, 'public_name': name, 'private_name': name}
            form = forms.AccountForm(data)
        else:
            if instance.twitter_user:
                twitter_problem = not twitter.connetion_ok(instance)
            form = forms.AccountForm(instance=instance)
    self.render(dict(title=u"AKKH HÃ¶hlenkataster",
                     hoehlen=Hoehle.query().order(-Hoehle.ganglaenge),
                     ), 'hoehlenliste.html')


    return shortcuts.render_to_response('taskmaster/account.html',
                                        {'form':form, 'twitter_problem': twitter_problem,
                                         'account': instance})


class AddTaskHandler(gaetk.handler.BasicHandler):
    @ndb.toplevel
    def get(self):
        user = users.get_current_user()
        opid = self.request.get('taskid')
        person = self.request.get('person')
        description = self.request.get('task')
        op = models.Op(account=user, task=description)
        op.put()
        logging.info(dir(op.key))
        self.response.write(op.key.urlsafe())


def api_delete_task(request):
    opid = request.GET.get('taskid')
    user = users.get_current_user()
    op = account.ops.get(designator=opid)
    op.state = 'deleted'
    op.save()
    return http.HttpResponse('ok')


urls = [('^/api/add_task*$', AddTaskHandler),
        ('^/.*$', TasklistHandler)]

app = webapp.WSGIApplication(urls)

def main():
    util.run_wsgi_app(app)

if __name__ == '__main__':
    main()
